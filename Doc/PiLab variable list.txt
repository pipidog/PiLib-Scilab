PiLab Variable lists (04/11/2016, PiLab:1.2.0)

########## Hr preparation ##########
{lat}: lattice construction
	==== << PiLab inputs >> ====
	[la.LatVec]: 3x3/2x2/1x1, real
	<= primitive row vectors 
	[lat.Sublat]: nx3/nx2/nx1 , real
	<= sublattice position, 
	[lat.AtomType]: nx1, string
	<= the atomic number or atomic name of each sublattice.
       use '*' to specify the number
	e.g ['2*Ba','1*Bi','1*I','6*O']
	[lat.VecOrder]: 1x1, int
	<= order of primitive vector expansion for searching neighbors
	[lat.Tolerance]: 1x1, real
	<= criterion of identifying the order of neighbor. For bond length  
	differnece small than this value will be considered as the same 
	neighbor order. 
	[lat.Order]: 1x1, int
	<= select how many nn-orders will be print out.  

	==== << PiLab outputs >> ====
	[lat.rec_vec]: 3x3/2x2/1x1, real
	=> reciprocal lattice row vectors
	[lat.surr_site]: n x 9, real 
	=> surrouding sites, [order, dist, sublatt, n1, n2, n3, x, y, z]

{hop}: hopping integral generation
	==== << PiLab inputs >> ====
	[hop.SiteOrb]: n x 2, integer 
	<= specify orbital of each site, nx2, [site, l]
	[hop.Order]: 1x1 integer
	<= order of nearest coupling 
	[hop.SKint]: n x 7, real 
	<= SK parameters, [Orb1,Orb2,nn_order,ts,tp,td,tf]
	[hop.LS]: 1xn, real
	<= strength of LS coupling on each SiteOrb. 
	[hop.Filter]: 1x1, real
	<= filter of small hopping elements, 
	[hop.Basis]: 1x1, string
	<= basis of Hamiltonian, 'c', 's', 'rc', 'rs'
	[hop.SelState]: 1xn, integer
	<= select states by inputting their state label 
	[hop.OnsiteE]: 1xn,, real 
	<= Onsite energy of selected states (given by their order)

	==== << PiLab outputs >> ====
	[hop.state_info_text]: total state x 5, string  
	=> state info in text format
	phop.state_info]: total state x 5, int 
	=> state info in num format, 'i'
	[hop.LS_mat]: n x 3, t-sp real
	=> LS coupling matrix
	[hop.onsite_E]: n x 3, t-sp real
	=> onsite energy matrix
	[hop.hop_size]: total sublattice x 4, int
	=> size of hop_mat
	[hop.hop_mat]: list(n) x (n,m,p), a-sp 
	=> hopping matrix 

{scc}: self-consistent calculation
	==== << PiLab inputs >> ====
	[scc.HubU]: n x 2, int / empty
	<= U for each state, [state_label, U] or blank 
	[scc.Charge]: 1x total state        
	<= charge of each state, 1x total state
	[scc.Mixing]: 1x1, 0~1 real
	<= mixing parameter, 0~1
	[scc.Iteration]: 1x1, int
	<= maximal number of iterations
	[scc.Converge]: 1x1, < 1e-1 real
	<= convergence criterion, real, at least < 0.1
	[scc.Mesh]: 1x1 / 1x2 / 3x3, int
	<= k-space mesh for calculating Ef, large for metal
	[scc.Temperature]: 1x1, real, default=100
	<= temperature for searching Ef, large for insulator
	
	==== << PiLab outputs >> ====
	[scc.E_Fermi]: 1x1, real
	=> the chemical potential, may not be accuate if scc.Mesh is small
	[scc.E_gap]: 1x1, real
	=> the band gap, may not be accuate if scc.Mesh is small
	[scc.DM_out]: n x 3, real, t-sp
	=> the self-consistent density matrix
	[scc.U_mat]: n x 3, real, t-sp
	=> the self-consistent Hubbard potential

{flq}: Floquet Hamiltonian generation
	==== << PiLab inputs >> ====
	[flq.Frequency]: 1x1 real
	<= field frequency, 
	[flq.Order]: 1x1, int
	<= order of photon process, 
	[flq.Amplitude]: 1x1 / 1x2 / 1x3, real
	<= AC amplitude,  
	[flq.Phase]: 1x1 / 1x2 / 1x3, real
	<=AC phase

	==== << PiLab outputs >> ====
	[flq.state_info]: tot flq state x 6, int
	=> [state_label, order, site, identifier, l, SubOrb]
	[flq.H_local]: list(tot order) x n x 3, t-sp
	=> onsite energy of a particualr order 
	[flq.hop_size]: (tot_order*tot_sublatt) x 5
	=> size of flq.hop_mat, [order+1,sublatt,hop_mat_size]
	[flq.hop_mat]: list(tot order)(tot_sublatt) x hop_mat(:,:,:), a-sp
	=> floquet hopping matrix 

{wan}: wanniersation
    ==== << PiLab inputs >> ====
    [wan.OutFile]: n x 1, string 
    <= file name of the wannier90 output of the wannier function
    [wan.HrFile]: n x 1, string
    <= file name of the wannier90 hr.dat file.
    [wan.Spin]: 1xn, string, 'r'/'s'/[]
    <= spin, 'r': relativistic, 's': scalar
       PiLab will try to label the spin if possible. 
    [wan.Filter]: 1x1, real / []
    <= filter Hr_mat(:,:,n) smaller that given value, [] if no filter 
    [wan.Verbosity]: 1x1, string, 'less' / 'more'
    <= if 'less', H_r related information will not br printed.
    
    ==== << PiLab outputs >> ====
    [wan.lat_vec]: 3x3, real
    => lattice vectors
    [wan.rec_vec]: 3x3, real
    => reciprocal lattice vectors
    [wan.atom_type]: nx1, string
    => type of each atom
    [wan.sub_lat]: nx3, real
    => sublattce positions
    [wan.wf_spatial]: nx4, ral
    => [wannier function center (x,y,z), wannier spread]
    [wan.wf_site]: nx5,real
    => nearest lattice site of each WFs. [b,n1,n2,n3,norm_err]
    [wan.state_info]: nx5, real
    => [(x,y,z) in uc, spin]
    [wan.uc_index]: nx4, integer
    => [uc_index(n1,n2,n3), degeneracy]
    [wan.Hr_mat]: tot_wf x tot_wf*tot_uc_index, sparse-real
    => matrix of <n(0)|H|m(R)>, 
       store in this way: Hr_mat(:,(n-1)*tot_wf+1:n*tot_wf)
    
{hdr}: Hamiltonian dimension reduction
    ==== << PiLab inputs >> ====
    [hdr.ConvCell]: 3x3, real
    <= the conventional cell row vecvtors, in unit of the WF lattice vectors 
    [hdr.TotCC]: 1x1, integer
    <= number of conventional cell along a3 direction
    [hdr.Task]: 1x1, string, 'plot' / 'run'
    <= 'plot': output structure file only. 'run': run whole module.  

    [hdr.Verbosity]: 1x1, string, 'less' / 'more'
    <= if 'less', H_r related information will not br printed.
    
    ==== << PiLab outputs >> ====
    [hdr.pc_vec]: 3x3, real
    => lattice row vectors of primitive cell (w90 input)
    [hdr.pc_sublat]: nx3, real
    => sublattice row vectors of primitive sublattice (w90 input) 
    [hdr.pc_atom]: nx1, string
    => atom type of primitive cell

    [hdr.cc_vec]: 3x3, real
    => lattic row vector of conventional cell 
    [hdr.cc_sublat]: tot_cc_sublat x 10, real
    => index in pc(4),x, y, z, expan in cc(3)
    [hdr.cc_atom]: tot_cc_sublat x 1, string
    => atom type of conventional cell
    
    [hdr.slab_vec]: 3x3, real
    => lattice row vectors of slab unitcell
    [hdr.slab_sublat]: tot_slab_sublat x 5, real
    => sublat index in pc(1), x,y,z, proj on a3
    [hdr.slab_atom]: tot_slab_sublat x 1, string
    => atom type of slab sublattice
    
    [hdr.cc_unit]: nx10, real
    => primitive unit cell inside the conevntional cell
      [(b=1,n1,n2,n3),x,y,z,expan in cc]
    [hdr.slab_unit]: nx10, real
    => primitive unit cell inside the slab cell
      [(b=1,n1,n2,n3),x,y,z,expan in sc]
      
    [hdr.coup_unit]: nx7, int  
    => pc coupled to the R=0 slab
      [(n1,n2,n3 in pc),(n1, n2, n3 in slab), uc_deg]
    
    [hdr.state_info]: tot_slab_wf x 4, integer 
    => state info of slab WFs
       [(wf label in pc), (n1, n2, n3 in pc)]
    
    [hdr.uc_index]: nx3, integer
    => R of Hr_mat index in slab lattice vector
    
    [hdr.Hr_mat]:  tot_slab_WF x tot_slab_WF x tot_coup_slab
    => Hr of the slab structure, sparse format
	
{spl}: spuer lattice construction
    ==== << PiLab inputs >> ====
    [spl.SuperCell]: 3x3, real
    <= the conventional cell row vecvtors, in unit of the WF lattice vectors 
    [spl.Task]: 1x1, string, 'str' / 'run'
    <= 'str': output structure file only. 'run': run whole module.  
    [spl.Verbosity]: 1x1, string, 'less' / 'more'
    <= if 'less', H_r related information will not br printed.
    
    ==== << PiLab outputs >> ====
    [spl.pc_vec]: 3x3, real
    => lattice row vectors of primitive cell (w90 input)
    [spl.pc_sublat]: nx3, real
    => sublattice row vectors of primitive sublattice (w90 input) 
    [spl.pc_atom]: nx1, string
    => atom type of primitive cell
    
    [spl.sc_vec]: 3x3, real
    => lattice row vectors of sc unitcell
    [spl.sc_sublat]: tot_sc_sublat x 5, real
    => sublat index in pc(1), x,y,z, proj on a3
    [spl.sc_atom]: tot_sc_sublat x 1, string
    => atom type of sc sublattice
    
    [spl.sc_unit]: nx10, real
    => primitive unit cell inside the sc
    [(b=1,n1,n2,n3),x,y,z,expan in sc]
    
    [spl.coup_unit]: nx7, int  
    => pc coupled to the R=0 sc
    [(n1,n2,n3 in pc),(n1, n2, n3 in sc), uc_deg]
    
    [spl.state_info]: tot_sc_wf x 4, integer 
    => state info of sc WFs
    [(wf label in pc), (n1, n2, n3 in pc)]
    
    [spl.uc_index]: nx3, integer
    => R of Hr_mat index in sc lattice vector
    
    [spl.Hr_mat]:  tot_sc_WF x tot_sc_WF x tot_coup_sc
    => Hr of the sc structure, sparse format
	
{imp}: impurity onsite potential	
    ==== << PiLab Inputs >> ====
    [imp.HrRead]: 1x1, str, 'wan'/'spl'/'hdr'
    <= specify the Hr to read. 
    [imp.PotState]: 1xn, int
    <= states that onsite fields are applied
    [imp.PotStreng]: 1xn, real
    <= energy shift of each assigned sublattice
    ==== << PiLab Outputs >> ====
    [imp.R0_index]: 1x1, int
    => index of R=0 unit cell in the loaded uc_index
    [imp.pot_orig]: tot_wf x 1, real
    => original onsite potential of each WF.
    [imp.pot_corr]: tot_wf x 1, real
    => onsite potential corrections of each WF. 

########## Hamiltonian Construction ##########
{ham}: Hamiltonian construction
    ==== << PiLab inputs >> ====
    [ham.builder]: n x 1, string
    <= tasks that used to build Hr. Currently, PiLab support the follwing
    tasks to build Hr.
        ['lat','hop','scc']: conventional Slaster-Koster construction
        ['lat','hop','flq']: Slaster-Koster Floquet construction
        ['wan']: Wannier 90 construction
        ['wan','hdr']: Wannier 90 + dimension reduction construction
        * the order of the tasks doesn't matter.   
    [ham.Verbosity]: 1x1, string, 'less' / 'more'
    <= if 'less', Hr related information will not be printed. 

    ==== << PiLab outputs >> ====
    [ham.lat_vec]: 3x3, real
    => lattice row vectros
    [ham.rec_vec]: 3x3, real
    => reciprocal lattice row vectors
    [ham.atom_type]: tot_sublat x 1, string
    => atom type of sublattice
    [ham.sub_lat]: tot_sublat x 3, real
    => sublattice row vectors
    [ham.state_type]: 2x1, string
    => first row tells the types of the states. the second
    row tells you how to understand each column in state_info
    [ham.state_info]: real, size depends on ham.state_type
    => state info of each state, meaning of each column should
    reference to ham.state_type.
    [ham.TR_check]: 1x1, int, 0/1
    => if 1, TRS exists. if 0, TRS not exists. 
    [ham.uc_index]: n x 3, integer
    => unit cell index of the <n(0)|H|m(R)>
    [ham.Hr_mat]: tot_uc_index x tot_slab_wf x tot_slab_wf
    => Hr of different R
	
########## Post Process ##########	
{ban}: band structure calculation
    ==== << PiLab inputs >> ====
    [ban.Format]: 1x1, string, 'red' / 'cart'
    <= format of ban.Path points, reduced or cartisian k-points
    [ban.Path]: nx3, n>=2, real            
    <= points to defined your paths, ban.Format defines their meaning 
    [ban.DivType]: 1x1, string, 'unit' / 'seg'
    <= how to divide k_path, 'unit': division for unit length
    'seg': divison for each segment  
    [ban.Div]: 1x1, int
    <= k points mesh of each path, ban.DivType defines their meaning
    [ban.Fermi]: 1x1, real
    <= value of Fermi energy, should be obtained from scc
    or ab initio if wan.
    [ban.StateProj]:1xn, int
    <= specify the states to be projected, so projected band
       can be plotted. You can project to several sets at once.  
       To specify it, use negative values to distinguish each 
       projection sets. e.g: [-1,1:5,-2,3:8,3,17:22]
       It means the first projection is state 1~5, the second is
       state 3~8, and so on. 
       Then PiLab will output several plots for each projected bands.
    [ban.Draw]: 1x1, string, 'on' / 'off'
    <= whether draw band structure
    [ban.Shift]: 1x1, string, 'on' / 'off'
    <= whether to shift Ef to 0 in plot
    [ban.Ebound]: 1x2, real, optional, default:[], i.e. natural range
    <= energy window to print band, [Emin, Emax], if ban.shift='on', 
    then Ebound assumes Ef=0.
    [ban.Thickness]: 1x1, integer
    <= thickness of the band lines. suggested value: 1~3
    [ban.MarkerSize]: 1x1, integer
    <= marker size of the projected bands. suggested value: 3~5
    
    ==== << PiLab output >> ====
    [ban.k_path_div]: nx1, int
    => number of divisions of each segment
    [ban.k_point]: tot_k x 4, real
    => [kx,ky,kz]
    [ban.k_band]: tot_state x tot_k, real
    => band energies, [En(k1),En(k2)...]
    [ban.H_k]: tot_k x tot_state x tot_state
    => Hamiltonian matrix at each k-point
    [ban.k_vec]: tot_k x tot_state x tot_state 
    => eigenvectors of each k-point   
    
    ==== << PiLab output >> ====
    [ban.k_path_div]: nx1, int
    => number of divisions of each segment
    [ban.k_point]: tot_k x 4, real
    => [kx,ky,kz]
    [ban.k_band]: tot_state x tot_k, real
    => band energies, [En(k1),En(k2)...]
    [ban.k_weight]: tot_state x tot_k x tot_projection, real
    => weighting number of a eigenstate on the assigned projections.
    
{kif}: k-points infromation (use distrubuted k-point calculation)
    ==== << PiLab inputs >> ====
    # System setup
    [kif.Command]: 1x1, string, 
    <= specify how do you submit a scilab job to the background in your 
    machine. The input file name and output file name should be replaced
    by @input_name and @output_name. PiLab will use correct name for them. 
    Note: In linux, it is usually:
    'scilab -nwni -f @input_name > @output_name &'
    In windows, it is usually:
    'start /b scilex -nwni -f @input_name > @output_name'
    
    # k-generation
    [kif.KptGen]: 1x1, string, 'grid'/'path'/'manual'
    <= Define how to generate k-points. If 'grid',PiLab will use 
    kif.SpanVec and kif.Mesh to generate grid k-points. 
    If 'path', PiLab use kif.Path and kif.Div to generate k-path
    If 'manual', PiLab will ignore kif.SpanVec and kif.Mesh and read the 
    k-points from a file called "kif_kpoint.dat". In this file, there 
    should be a nx3 matrix which lists all the k-points in PiLib variable 
    format.
    [kif.Format]: 1x1, string, 'red'/'cart'
    <= Define whether the k-points are in reduced or cartisian coordinate
    * If 'grid' --------------
    [kif.SpanVec]: 4x3, real
    <= Define 3 vectors to span a mesh box. The first row will be the
    origin and the next three are three positions from the origin
    to span the mesh box. Whether these points are defined in reduced
    or cartisna coordinate show be defined in kif.Format.
    [kif.Mesh]: 1x3, int
    <= Define mesh number of each vector. Note that, the mesh will 
    include head and tail of each vector. If any mesh number=1, means
    there is no mesh. If mesh number=2, means only the origin and the
    end point are included in that direction.     
    * If 'path' ---------------
    [kif.Path]: nx3, real
    <= k_path in reduced coordinates
    [kif.Div]: 1x1, int
    <= k_mesh along k_path of each unit length k
    
    # Job allocation   
    [kif.Allocation]: 1x1, int
    <= how many allocations to disturbut this calculation.
    [kif.Thread]: 1x1, int
    <= how many threads to run at the same time
    [kif.MaxRAM]: 1x1, real
    <= set the Max RAM usage for the calculation. If the PiLab estimeted
    RAM is larger than this, calculation will be stopped in the beginning. 
    If so, try to increase Kif.Allocation so each allocation will need
    less RAM. 
    
    ==== << PiLab output >> ====
    [kif.k_point]: nx3, real
    => k-points
    [kif.k_num]: 1 x tot_alloc, int
    => number of k-points in each allocation
    
{kif_esc}: energy surface cut (perform a energy surface cut in 2D BZ)
    ==== << PiLab inputs >> ====
    [kif_esc.EVal]: 1x1, real
    <= Energy of the energy surface cut
    [kif_esc.EWin]: 1x1, real
    <= Energy window of the energy cut
    [kif_esc.StateProj]:1xn, integer
    <= projection of the energy cut on each state.
    For states selected in that energy window, PiLab can evaluate their
    weighting on the assigned states. 
    use negative integer as divider to specify each proejction. 
    [kif_esc.Thread]: 1x1, integer
    <= how many thread to run
    ==== << PiLab outputs >> ====
    [kif_esc.E_index]: tot_k x tot_proj+1
    <= [k_point, E_index, n-th weight ]
    
{kif_sbn}: surface band structure (plot a 2D band surface)
    ==== << PiLab inputs >> ====
    [kif_sbn.SelBan]: 1xn, integer
    <= band index of the selected bands
    [kif_sbn.Verbosity]: 1x1, string, 'more' / 'less'
    <= whether to print out all eigenvalues. 
    [kif_sbn.Thread]: 1x1, integer
    <= how many threads to run
    
    ==== << PiLab outputs >> ====
    [kif_sbn.k_mesh]: 1x3, integer
    <= 2D kmesh
    [kif_sbn.k_band]: tot_SelBan * tot_k
    <= band structure of each band structure

{kif_ban}: band structure along k-path
    ==== << PiLab inputs >> ====
    [kif_ban.SelBan]: 1xn, integer
    <= band index of the selected bands
    [kif_ban.StateProj]: 1xn, integer
    <= projection onto assigined states. use negative as divider
    [kif_ban.Verbosity]: 1x1, string, 'more' / 'less'
    <= whether to print out all eigenvalues and weighting 
    ==== << PiLab outputs >> ====
    [kif_ban.k_div]: 1x3, integer
    => number of k-pt of each k-path
    [kif_ban.k_band]: tot_SelBan * tot_k
    => band structure of each band structure
    [kif_ban.k_weight]: tot_SelBan * tot_k * tot_proj
    => projected weighting of each band states 