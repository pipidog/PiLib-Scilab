// **** Purpose ****
// It generates the full space sites and their surrounding sites which 
// helps you generate a Hamiltoian in real space
// **** Variables ****
// [surr_site]:   total_nb x 9 x total_sublatt , real
// <= variable generated by PIL_uc_nb
// [r_mesh]: 1x3, integer
// <= how many unntcell along each primitive vector, each direction 
//    must larger than nn_order+1. ex:nn_order=2, [r_mesh]>=[3,3,3]
// [site_list]: total_site x 4, integer
// => each unitcell is specified by r=n1*a1+n2*a2+n3*a3
//    it tells how we label each site by [sublatt_label,n1,n2,n3] 
// [r_nb_list]: total_nb x 7 x total_sublatt x total_uc, real
// => the surrounding sites of that (unitcell,sublatt) up to N-th order
//    [distant, unitcell label, sublattice label, n1, n2, n3, cell_label, site_label]  
// **** Version ****
// 05/01/2014 first built
// 05/24/2014 full rewrite the code
// **** Comment ****
// 1. this function includes periodic bounary condition 
// 2. Since the xyz coordinates are not important in real-space Hamailtonian, 
//    it won't tell you their coordinate. Instead, it tells you their label.

function [site_list,r_nb_list]=PIL_r_nb(surr_site,r_mesh)
    select length(r_mesh) 
    case 1
        r_mesh=[r_mesh,1,1];
    case 2
        r_mesh=[r_mesh,1];
    end
    
    // construct unitcell label
    tot_uc=prod(r_mesh);
    tot_sublatt=size(surr_site);
    select length(tot_sublatt);
    case 2
        tot_sublatt=1;
    case 3
        tot_sublatt=tot_sublatt(3);
    end

    uc_label=zeros(tot_uc,3);
    uc_count=0;
    uc_label=PIL_nest_loop(cat(2,ones(r_mesh)',r_mesh'))-1;
    site_list=zeros(tot_uc*tot_sublatt,4);

    // calculate list for all sublattice in all unitcell
    // r_nb_list=[nn_order,dist,sublatt,n1,n2,n3,unit_cell_label,site_label]
    surr_site_len=length(surr_site(:,1));
    r_nb_list=zeros(surr_site_len,8,tot_sublatt,tot_uc);
    for n=1:length(uc_label(:,1))
        for m=1:tot_sublatt
            r_nb_list(:,1:6,m,n)=surr_site(:,1:6,m);
            r_nb_list(:,4:6,m,n)=r_nb_list(:,4:6,m,n)+repmat(uc_label(n,:),surr_site_len,1);
            // if [n1,n2,n3] overlarge or oversmall, apply PBC 
            for p=1:3
                oversmall_uc=find(r_nb_list(:,p+3,m,n)<0);
                r_nb_list(oversmall_uc,p+3,m,n)=r_nb_list(oversmall_uc,p+3,m,n)+r_mesh(p);
                overlarge_uc=find(r_nb_list(:,p+3,m,n)>r_mesh(p)-1);
                r_nb_list(overlarge_uc,p+3,m,n)=r_nb_list(overlarge_uc,p+3,m,n)-r_mesh(p);
            end
            site_list(2*(n-1)+m,:)=[r_nb_list(1,3:6,m,n)];
        end
    end

    // generate site_label
    for n=1:length(uc_label(:,1))
        for m=1:tot_sublatt
            for p=1:surr_site_len
                // site_label
                r_nb_list(p,8,m,n)=find((site_list(:,1)==r_nb_list(p,3,m,n)) & (site_list(:,2)==r_nb_list(p,4,m,n))...
                & (site_list(:,3)==r_nb_list(p,5,m,n)) & (site_list(:,4)==r_nb_list(p,6,m,n)));
                // unitell_label
                r_nb_list(p,7,m,n)=ceil(r_nb_list(p,8,m,n)/tot_sublatt);
            end
        end
    end
endfunction
