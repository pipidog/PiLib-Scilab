// **** Purpose ****
// expand a matrix using a tensor operator basis
// **** Variables ****
// A: nxn, real or complex
// <= a matrix
// TO_basis: (n x n x n^2, real or complex) / (char: 's', 't', 'c')
// <= tensor operator basis to expand A 
//    either the hyper matrix of the basis or a character to specify the basis 
// TO_expan: n^2 x 1, real or complex
// => the expansion coefficients
// **** Version ****
// 05/01/2014
// **** Comment ****
// This function break a given matrix via tensor operators. The output is the 
// expansion cofficients of each tensor operators. The input argument 'TO_basis'
// can be 's', 'c' or a given tensor operator generated by PIL_TO_gen. 
// Remember that all our Mz are in increasing order: -1,0,1. So, make sure
// your input matrix A is in the same manner. 

function TO_expan=PIL_TO_expan(A,TO_basis)
    J=(length(A(:,1))-1)/2;

    [lhs,rhs]=argn();
    if rhs==1
        TO_basis='s';
    end
    
    if type(TO_basis)==10
        T=PIL_TO_gen(J,TO_basis);
    else
        T=TO_basis;
    end
    T_size=size(T);
    TO_expan=zeros(T_size(3),1);
    for n=1:T_size(3)
        TO_expan(n)=sum(diag(T(:,:,n)'*A));
    end
endfunction

//examples:
//A=[1 1 1; 1 1 1; 1 1 1]
//TO_expan=mylib_TO_expan(A)
// TO_expan  =
// 
//    1.7320508  
//    1.4142136  
//    0.         
//  - 1.4142136  
//    1.         
//    0.         
//    0.         
//    0.         
//    1.        
